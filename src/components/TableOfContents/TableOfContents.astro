---
interface TocItem {
  depth: number;
  text: string;
  slug: string;
}

interface Props {
  toc: TocItem[];
}

const { toc } = Astro.props;
---

<nav class="toc">
  <div class="toc-header">On this page</div>
  <ul class="toc-list">
    {toc.map((item) => (
      <li class={`toc-item depth-${item.depth}`} data-slug={item.slug}>
        <a href={`#${item.slug}`} class="toc-link" data-section-target={item.slug}>
          {item.text}
        </a>
      </li>
    ))}
  </ul>
  <div class="toc-cursor" id="toc-cursor"></div>
</nav>

<script>
  class TableOfContents extends HTMLElement {
    constructor() {
      super();
      this.init();
    }

    init() {
      const sections = new Map();
      const links = this.querySelectorAll('[data-section-target]');
      const cursor = this.querySelector('.toc-cursor');
      
      links.forEach(link => {
        const target = link.getAttribute('data-section-target');
        if (target) {
          const section = document.getElementById(target);
          if (section) {
            sections.set(target, { section, link });
          }
        }
      });

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const targetId = entry.target.id;
            const { link } = sections.get(targetId) || {};
            
            if (link && cursor) {
              links.forEach(l => l.classList.remove('active'));
              link.classList.add('active');
              
              const linkRect = link.getBoundingClientRect();
              const navRect = this.getBoundingClientRect();
              const top = linkRect.top - navRect.top;
              
              cursor.style.transform = `translateY(${top}px)`;
              cursor.style.opacity = '1';
            }
          }
        });
      }, {
        rootMargin: '-20% 0px -35% 0px'
      });

      sections.forEach(({ section }) => {
        observer.observe(section);
      });

      links.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('data-section-target');
          const section = document.getElementById(targetId);
          if (section) {
            section.scrollIntoView({ behavior: 'smooth' });
          }
        });
      });
    }
  }

  customElements.define('table-of-contents', TableOfContents);
</script>

<style>
  .toc {
    position: sticky;
    top: 20px;
    max-height: calc(100vh - 40px);
    overflow-y: auto;
    padding: 1rem;
    border-left: 1px solid #eaeaea;
    min-width: 240px;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .toc::-webkit-scrollbar {
    display: none;
  }

  .toc-header {
    font-weight: 700;
    font-size: 0.875rem;
    color: #868e96;
    text-transform: uppercase;
    letter-spacing: 0.075em;
    margin-bottom: 1rem;
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
    position: relative;
  }

  .toc-item {
    margin: 0;
    position: relative;
  }

  .toc-link {
    color: #495057;
    text-decoration: none;
    font-size: 0.875rem;
    line-height: 1.5;
    padding: 0.375rem 0;
    display: block;
    transition: all 0.2s ease;
  }

  .depth-2 {
    padding-left: 1rem;
  }

  .depth-3 {
    padding-left: 2rem;
  }

  .toc-link:hover {
    color: #228be6;
  }

  .toc-link.active {
    color: #228be6;
    transform: translateX(8px);
  }

  .toc-cursor {
    position: absolute;
    left: -1px;
    width: 2px;
    height: 1.5rem;
    background: #228be6;
    border-radius: 1px;
    transition: transform 0.2s ease, opacity 0.2s ease;
    pointer-events: none;
    opacity: 0;
  }
</style>